Index: gui/base.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter\nfrom tkinter import Canvas, Button, mainloop, Tk\n\nfrom PIL import ImageTk, Image\n\nfrom pose_comparator import Comparator\n\n\nclass BaseGUI:\n    def __init__(self, root=None, image_resolution=(800, 600)):\n        self.comparator = None\n        self.sets = None\n        self.index_of_set = None\n        self.index_in_set = None\n        self.root = root if root is not None else Tk()\n        self.image_width, self.image_height = image_resolution\n        self.left_image = None\n        self.right_image = None\n        self.left_canvas = Canvas(self.root, width=self.image_width, height=self.image_height)\n        self.left_canvas.grid(row=0, column=0, columnspan=2)\n        self.right_canvas = Canvas(self.root, width=self.image_width, height=self.image_height)\n        self.right_canvas.grid(row=0, column=2, columnspan=2)\n        self.next_set_button = Button(self.root, text='>>', command=self.next_set)\n        self.next_set_button.grid(row=1, column=3)\n        self.previous_set_button = Button(self.root, text='<<', command=self.previous_set)\n        self.previous_set_button.grid(row=1, column=0)\n        self.next_image_button = Button(self.root, text='>', command=self.next_image)\n        self.next_image_button.grid(row=1, column=2)\n        self.previous_image_button = Button(self.root, text='<', command=self.previous_image)\n        self.previous_image_button.grid(row=1, column=1)\n        self.quit_button = Button(self.root, text='CLOSE', command=self.quit)\n        self.quit_button.grid(row=2, column=1, columnspan=2j)\n        self.init_comparator()\n        mainloop()\n\n    def update_images(self):\n        if not self.index_in_set < len(self.sets[self.index_of_set]):\n            self.index_in_set = 0\n            self.index_of_set += 1\n        if self.index_in_set < 0:\n            if self.index_of_set == 0:\n                self.index_of_set = len(self.sets) - 1\n            else:\n                self.index_of_set -= 1\n            self.index_in_set = len(self.sets[self.index_of_set]) - 1\n\n        if not self.index_of_set < len(self.sets):\n            self.index_of_set = 0\n            self.index_in_set = 0\n\n        left_image, right_image = self.sets[self.index_of_set][self.index_in_set]\n        self.left_image = ImageTk.PhotoImage(image=Image.fromarray(left_image))\n        self.right_image = ImageTk.PhotoImage(image=Image.fromarray(right_image))\n        self.left_canvas.create_image(0, 0, anchor=tkinter.NW, image=self.left_image)\n        self.right_canvas.create_image(0, 0, anchor=tkinter.NW, image=self.right_image)\n\n    def init_comparator(self):\n        comp = Comparator(good_pose='../predictions/baseball_1.npy',\n                          bad_pose='../predictions/baseball_me_2.npy',\n                          good_pose_video='../inputs/baseball_1.mp4',\n                          bad_pose_video='../inputs/me_2.mp4',\n                          good_bboxes='../predictions/baseball_1_metadata.npy',\n                          bad_bboxes='../predictions/baseball_me_2_metadata.npy')\n        self.sets = comp.compare_poses()\n        self.index_in_set = 0\n        self.index_of_set = 0\n        self.update_images()\n\n    def next_set(self):\n        self.index_of_set += 1\n        self.update_images()\n\n    def next_image(self):\n        self.index_in_set += 1\n        self.update_images()\n\n    def previous_set(self):\n        self.index_of_set -= 1\n        self.update_images()\n\n    def previous_image(self):\n        self.index_in_set += 1\n        self.update_images()\n\n    def quit(self):\n        exit()\n\n\nBaseGUI()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gui/base.py	(revision 31812cbc19c91fccea860305aa2c9943d5c80152)
+++ gui/base.py	(date 1590770981337)
@@ -29,7 +29,7 @@
         self.previous_image_button = Button(self.root, text='<', command=self.previous_image)
         self.previous_image_button.grid(row=1, column=1)
         self.quit_button = Button(self.root, text='CLOSE', command=self.quit)
-        self.quit_button.grid(row=2, column=1, columnspan=2j)
+        self.quit_button.grid(row=2, column=1, columnspan=2)
         self.init_comparator()
         mainloop()
 
